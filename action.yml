name: "GuardAI Action"
description: "A GitHub Action for running GuardAI in GitHub Workflows"
author: "Best Olunusi"
branding:
  icon: "box"
  color: "white"

inputs:
  version:
    description: "Version of GuardAI to install"
    required: false
    default: "latest"
  provider:
    description: "AI provider"
    required: true
  model:
    description: "AI model to use"
    required: false
  directory:
    description: "Directory to scan"
    required: false
    default: "."
  changes_only:
    description: "Scan only changed files"
    required: false
    default: "false"
  repo:
    description: "GitHub repository"
    required: false
  pr_number:
    description: "Pull request number"
    required: false
  github_token:
    description: "GitHub API token"
    required: false
  host:
    description: "Custom AI server host"
    required: false
  port:
    description: "Custom AI server port"
    required: false
  token:
    description: "Token for authenticating with the custom AI server"
    required: false
  endpoint:
    description: "API endpoint for the custom server"
    required: false
    default: "/api/v1/scan"

outputs:
  scan_output:
    description: "Output from the GuardAI scan"
    value: ${{ steps.scan.outputs.scan_output }}

runs:
  using: "composite"
  steps:
    - name: Install guardai
      uses: codeguardai/setup-guardai-action@v0.1.0
      with:
        version: ${{ inputs.version }}

    - name: Run guardai on Linux/macOS
      if: ${{ startsWith(runner.os, 'Linux') }}
      id: scan
      shell: bash
      run: |
        guardai_output_file="guardai_output.txt"
        guardai_command="guardai"

        # Conditionally add each flag
        [ -n "${{ inputs.provider }}" ] && guardai_command="$guardai_command --provider ${{ inputs.provider }}"
        [ -n "${{ inputs.directory }}" ] && guardai_command="$guardai_command --directory ${{ inputs.directory }}"
        [ -n "${{ inputs.model }}" ] && guardai_command="$guardai_command --model ${{ inputs.model }}"
        [ "${{ inputs.changes_only }}" == "true" ] && guardai_command="$guardai_command --changes_only"
        [ -n "${{ inputs.repo }}" ] && guardai_command="$guardai_command --repo ${{ inputs.repo }}"
        [ -n "${{ inputs.pr_number }}" ] && guardai_command="$guardai_command --pr_number ${{ inputs.pr_number }}"
        [ -n "${{ inputs.github_token }}" ] && guardai_command="$guardai_command --github_token ${{ inputs.github_token }}"
        [ -n "${{ inputs.host }}" ] && guardai_command="$guardai_command --host ${{ inputs.host }}"
        [ -n "${{ inputs.port }}" ] && guardai_command="$guardai_command --port ${{ inputs.port }}"
        [ -n "${{ inputs.token }}" ] && guardai_command="$guardai_command --token ${{ inputs.token }}"
        [ -n "${{ inputs.endpoint }}" ] && guardai_command="$guardai_command --endpoint ${{ inputs.endpoint }}"

        # Run the constructed command
        $guardai_command 1> $guardai_output_file

        # Set the content of the file as output
        echo "scan_output=$(cat $guardai_output_file)" >> $GITHUB_OUTPUT

    - name: Run guardai on Windows
      if: ${{ startsWith(runner.os, 'Windows') }}
      id: scan
      shell: pwsh
      run: |
        $guardai_output_file = "guardai_output.txt"
        $guardai_command = "guardai"

        # Conditionally add each flag
        if ($env:inputs.provider) { $guardai_command += " --provider $env:inputs.provider" }
        if ($env:inputs.directory) { $guardai_command += " --directory $env:inputs.directory" }
        if ($env:inputs.model) { $guardai_command += " --model $env:inputs.model" }
        if ($env:inputs.changes_only -eq "true") { $guardai_command += " --changes_only" }
        if ($env:inputs.repo) { $guardai_command += " --repo $env:inputs.repo" }
        if ($env:inputs.pr_number) { $guardai_command += " --pr_number $env:inputs.pr_number" }
        if ($env:inputs.github_token) { $guardai_command += " --github_token $env:inputs.github_token" }
        if ($env:inputs.host) { $guardai_command += " --host $env:inputs.host" }
        if ($env:inputs.port) { $guardai_command += " --port $env:inputs.port" }
        if ($env:inputs.token) { $guardai_command += " --token $env:inputs.token" }
        if ($env:inputs.endpoint) { $guardai_command += " --endpoint $env:inputs.endpoint" }

        # Run the constructed command
        Invoke-Expression "$guardai_command" > $guardai_output_file

        # Set the content of the file as output
        Write-Output "scan_output=$(Get-Content $guardai_output_file -Raw)" >> $env:GITHUB_OUTPUT

